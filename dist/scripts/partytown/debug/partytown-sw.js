const resolves=new Map,swMessageError=(e,t)=>({$msgId$:e.$msgId$,$error$:t}),httpRequestFromWebWorker=e=>new Promise(async t=>{const n=await e.clone().json(),s=await(e=>new Promise(async t=>{const s=await self.clients.matchAll(),n=[...s].sort((e,t)=>e.url>t.url?-1:e.url<t.url?1:0)[0];if(n){const s=12e4,o=[t,setTimeout(()=>{resolves.delete(e.$msgId$),t(swMessageError(e,"Timeout"))},s)];resolves.set(e.$msgId$,o),n.postMessage(e)}else t(swMessageError(e,"NoParty"))}))(n);t(response(JSON.stringify(s),"application/json"))}),response=(e,t)=>new Response(e,{headers:{"content-type":t||"text/html","Cache-Control":"no-store"}});self.oninstall=()=>self.skipWaiting(),self.onactivate=()=>self.clients.claim(),self.onmessage=e=>{const t=e.data,n=resolves.get(t.$msgId$);n&&(resolves.delete(t.$msgId$),clearTimeout(n[1]),n[0](t))},self.onfetch=e=>{const t=e.request,s=new URL(t.url),n=s.pathname;n.endsWith("sw.html")?e.respondWith(response('<!DOCTYPE html><html><head><meta charset="utf-8"><script src="./partytown-sandbox-sw.js?v=0.7.1"><\/script></head></html>')):n.endsWith("proxytown")&&e.respondWith(httpRequestFromWebWorker(t))}